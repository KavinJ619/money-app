{"ast":null,"code":"import uuid from 'uuid/v1';\nimport { GET_TRANSACTIONS, ADD_TRANSACTION, DELETE_TRANSACTION, GET_STATS, TRANSACTIONS_LOADING } from \"../actions/types\";\nconst initialState = {\n  transactions: [],\n  debit: 0,\n  remainder: 0,\n  loading: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_TRANSACTIONS:\n      return { ...state,\n        transactions: action.payload,\n        loading: false\n      };\n\n    case DELETE_TRANSACTION:\n      return { ...state,\n        transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\n      };\n\n    case ADD_TRANSACTION:\n      let totalDebit = 0;\n      state.transactions.map(({\n        amount\n      }) => {\n        totalDebit += parseFloat(amount);\n      });\n      totalDebit = totalDebit.toFixed(2);\n      state.remainder = totalDebit;\n      let moneySpent = 0;\n      state.transactions.map(({\n        amount\n      }) => {\n        if (amount < 0) {\n          moneySpent += parseFloat(amount);\n        }\n      });\n      moneySpent = moneySpent.toFixed(2);\n      state.debit = moneySpent;\n      return { ...state,\n        transactions: [action.payload, ...state.transactions]\n      };\n\n    case GET_STATS:\n    case TRANSACTIONS_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/kavin11/mern-money/client/src/reducers/transactionReducer.js"],"names":["uuid","GET_TRANSACTIONS","ADD_TRANSACTION","DELETE_TRANSACTION","GET_STATS","TRANSACTIONS_LOADING","initialState","transactions","debit","remainder","loading","state","action","type","payload","filter","transaction","_id","totalDebit","map","amount","parseFloat","toFixed","moneySpent"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,kBAA5C,EAAgEC,SAAhE,EAA2EC,oBAA3E,QAAsG,kBAAtG;AAEA,MAAMC,YAAY,GAAE;AAChBC,EAAAA,YAAY,EAAE,EADE;AAEhBC,EAAAA,KAAK,EAAC,CAFU;AAGhBC,EAAAA,SAAS,EAAC,CAHM;AAIhBC,EAAAA,OAAO,EAAC;AAJQ,CAApB;AAOA,eAAe,UAASC,KAAK,GAACL,YAAf,EAA6BM,MAA7B,EAAoC;AAC/C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKZ,gBAAL;AACI,aAAM,EACF,GAAGU,KADD;AAEFJ,QAAAA,YAAY,EAAEK,MAAM,CAACE,OAFnB;AAGFJ,QAAAA,OAAO,EAAC;AAHN,OAAN;;AAKJ,SAAKP,kBAAL;AACI,aAAM,EACF,GAAGQ,KADD;AAEFJ,QAAAA,YAAY,EAAEI,KAAK,CAACJ,YAAN,CAAmBQ,MAAnB,CAA0BC,WAAW,IAAIA,WAAW,CAACC,GAAZ,KAAoBL,MAAM,CAACE,OAApE;AAFZ,OAAN;;AAIJ,SAAKZ,eAAL;AACI,UAAIgB,UAAU,GAAC,CAAf;AACAP,MAAAA,KAAK,CAACJ,YAAN,CAAmBY,GAAnB,CAAuB,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAc;AACjCF,QAAAA,UAAU,IAAEG,UAAU,CAACD,MAAD,CAAtB;AACH,OAFD;AAGAF,MAAAA,UAAU,GAACA,UAAU,CAACI,OAAX,CAAmB,CAAnB,CAAX;AACAX,MAAAA,KAAK,CAACF,SAAN,GAAgBS,UAAhB;AAEA,UAAIK,UAAU,GAAC,CAAf;AACAZ,MAAAA,KAAK,CAACJ,YAAN,CAAmBY,GAAnB,CAAuB,CAAC;AAACC,QAAAA;AAAD,OAAD,KAAc;AACjC,YAAIA,MAAM,GAAG,CAAb,EAAgB;AACZG,UAAAA,UAAU,IAAEF,UAAU,CAACD,MAAD,CAAtB;AACH;AACJ,OAJD;AAKAG,MAAAA,UAAU,GAAEA,UAAU,CAACD,OAAX,CAAmB,CAAnB,CAAZ;AACAX,MAAAA,KAAK,CAACH,KAAN,GAAYe,UAAZ;AACA,aAAM,EACF,GAAGZ,KADD;AAEFJ,QAAAA,YAAY,EAAE,CAACK,MAAM,CAACE,OAAR,EAAiB,GAAGH,KAAK,CAACJ,YAA1B;AAFZ,OAAN;;AAIJ,SAAKH,SAAL;AAGA,SAAKC,oBAAL;AACI,aAAM,EACF,GAAGM,KADD;AAEFD,QAAAA,OAAO,EAAC;AAFN,OAAN;;AAKJ;AACI,aAAOC,KAAP;AA1CR;AA4CH","sourcesContent":["import uuid from 'uuid/v1'\nimport { GET_TRANSACTIONS, ADD_TRANSACTION, DELETE_TRANSACTION, GET_STATS, TRANSACTIONS_LOADING} from \"../actions/types\"\n\nconst initialState ={\n    transactions: [],\n    debit:0,\n    remainder:0,\n    loading:false\n}\n\nexport default function(state=initialState, action){\n    switch(action.type){\n        case GET_TRANSACTIONS:\n            return{\n                ...state,\n                transactions: action.payload,\n                loading:false\n            }\n        case DELETE_TRANSACTION:\n            return{\n                ...state,\n                transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\n            }\n        case ADD_TRANSACTION:\n            let totalDebit=0;\n            state.transactions.map(({amount}) => {\n                totalDebit+=parseFloat(amount)\n            });\n            totalDebit=totalDebit.toFixed(2);\n            state.remainder=totalDebit;\n\n            let moneySpent=0;\n            state.transactions.map(({amount}) => {\n                if (amount < 0 ){\n                    moneySpent+=parseFloat(amount)\n                }\n            });\n            moneySpent= moneySpent.toFixed(2)\n            state.debit=moneySpent\n            return{\n                ...state,\n                transactions: [action.payload, ...state.transactions]\n            }\n        case GET_STATS:\n            \n            \n        case TRANSACTIONS_LOADING:\n            return{\n                ...state,\n                loading:true\n            }\n            \n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}