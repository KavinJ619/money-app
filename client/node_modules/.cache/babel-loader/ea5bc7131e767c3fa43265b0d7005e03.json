{"ast":null,"code":"var _jsxFileName = \"/Users/kavin11/mern-money/client/src/components/ChartData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTransactions } from \"../actions/transactionActions\";\nimport { Container } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport { Pie } from \"react-chartjs-2\";\n\nclass ChartData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.data = {\n      labels: [],\n      datasets: [{\n        label: '# of Votes',\n        data: [],\n        backgroundColor: ['rgb(255, 99, 132)'],\n        borderColor: ['white'],\n        borderWidth: 2\n      }]\n    };\n\n    this.setGradientColor = (canvas, color) => {\n      const ctx = canvas.getContext(\"2d\");\n      const gradient = ctx.createLinearGradient(0, 0, 400, 400);\n      gradient.addColorStop(0, color);\n      gradient.addColorStop(0.95, \"rgba(133, 122, 144,0.5)\");\n      return gradient;\n    };\n\n    this.setChartData = canvas => {\n      const data = this.data;\n\n      if (data.datasets) {\n        let colors = [\"rgba(255,0,255,0,75)\", \"rbga(0, 255, 0, 0.75\"];\n        data.datasets[0].data.forEach((set, i) => {\n          data.datasets[0].backgroundColor = this.setGradientColor(canvas, colors[i]);\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      transactions\n    } = this.props.transaction;\n    const chartLabels = [];\n    transactions.map(({\n      title,\n      amount\n    }) => {\n      if (amount < 0) {\n        chartLabels.push(title);\n      }\n    });\n    const chartData = [];\n    transactions.map(({\n      amount\n    }) => {\n      if (amount < 0) {\n        chartData.push(amount);\n      }\n    });\n    this.data.datasets[0].data = chartData;\n    this.data.labels = chartLabels;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Pie, {\n      data: this.data,\n      responsive: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nChartData.propTypes = {\n  transaction: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  transaction: state.transaction\n});\n\nexport default connect(mapStateToProps)(ChartData);","map":{"version":3,"sources":["/Users/kavin11/mern-money/client/src/components/ChartData.js"],"names":["React","Component","connect","getTransactions","Container","PropTypes","Pie","ChartData","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","setGradientColor","canvas","color","ctx","getContext","gradient","createLinearGradient","addColorStop","setChartData","colors","forEach","set","i","render","transactions","props","transaction","chartLabels","map","title","amount","push","chartData","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTransactions } from \"../actions/transactionActions\";\nimport {Container} from \"reactstrap\"\nimport PropTypes from \"prop-types\";\nimport { Pie } from \"react-chartjs-2\";\n\nclass ChartData extends Component{\n    \n    data ={\n        labels: [],\n        datasets: [{\n            label: '# of Votes',\n            data: [],\n            backgroundColor: ['rgb(255, 99, 132)'],\n            borderColor: [\n                'white'\n            ],\n            borderWidth: 2\n        }]\n    }\n\n    \n\n    setGradientColor = (canvas, color) => {\n        const ctx=canvas.getContext(\"2d\")\n        const gradient=ctx.createLinearGradient(0,0,400,400);\n        gradient.addColorStop(0, color);\n        gradient.addColorStop(0.95, \"rgba(133, 122, 144,0.5)\")\n        return gradient;\n    }\n\n    \n    \n    setChartData = canvas => {\n        const data = this.data;\n        if (data.datasets) {\n            let colors = [\"rgba(255,0,255,0,75)\", \"rbga(0, 255, 0, 0.75\"];\n            data.datasets[0].data.forEach((set, i) => {\n                data.datasets[0].backgroundColor = this.setGradientColor(canvas, colors[i])\n            })\n        }\n    }\n\n\n    render(){\n        const { transactions } = this.props.transaction\n        const chartLabels=[];\n        transactions.map(({title, amount})=>{\n            if (amount<0){\n                chartLabels.push(title)\n            }\n            \n        });\n        \n        \n\n        const chartData=[];\n        transactions.map(({amount})=>{\n            if (amount <0){\n                chartData.push(amount)\n            }\n        });\n\n        \n        \n        this.data.datasets[0].data=chartData\n        this.data.labels=chartLabels\n        \n        \n        return(\n            <Container>\n                <Pie data={this.data} responsive=\"true\" />\n            </Container>\n        )\n    }\n}\n\nChartData.propTypes = {\n\n    transaction: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    transaction: state.transaction\n\n})\n\nexport default connect(mapStateToProps)(ChartData)"]},"metadata":{},"sourceType":"module"}