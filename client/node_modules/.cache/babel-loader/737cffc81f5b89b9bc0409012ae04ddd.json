{"ast":null,"code":"import uuid from 'uuid/v1';\nimport { GET_TRANSACTIONS, ADD_TRANSACTION, DELETE_TRANSACTION, GET_STATS } from \"../actions/types\";\nconst initialState = {\n  transactions: [{\n    id: uuid(),\n    title: \"Sainsbury's\",\n    amount: -33.75,\n    date: Date.now()\n  }, {\n    id: uuid(),\n    title: \"Greggs\",\n    amount: -15.25,\n    date: Date.now()\n  }, {\n    id: uuid(),\n    title: \"Mission Burrito\",\n    amount: -7.23,\n    date: Date.now()\n  }, {\n    id: uuid(),\n    title: \"Fishies\",\n    amount: 1000.50,\n    date: Date.now()\n  }],\n  debit: 0,\n  remainder: 0\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_TRANSACTIONS:\n      return { ...state\n      };\n\n    case DELETE_TRANSACTION:\n      return { ...state,\n        transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\n      };\n\n    case ADD_TRANSACTION:\n      return { ...state,\n        transactions: [action.payload, ...state.transactions]\n      };\n\n    case GET_STATS:\n      let totalDebit = 0;\n      state.transactions.map(({\n        amount\n      }) => {\n        totalDebit += parseFloat(amount);\n      });\n      totalDebit = totalDebit.toFixed(2);\n      state.remainder = totalDebit;\n      let moneySpent = 0;\n      state.transactions.map(({\n        amount\n      }) => {\n        if (amount < 0) {\n          moneySpent += parseFloat(amount);\n        }\n      });\n      moneySpent = moneySpent.toFixed(2);\n      state.debit = moneySpent;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/kavin11/mern-money/client/src/reducers/transactionReducer.js"],"names":["uuid","GET_TRANSACTIONS","ADD_TRANSACTION","DELETE_TRANSACTION","GET_STATS","initialState","transactions","id","title","amount","date","Date","now","debit","remainder","state","action","type","filter","transaction","payload","totalDebit","map","parseFloat","toFixed","moneySpent"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,kBAA5C,EAAgEC,SAAhE,QAAgF,kBAAhF;AAEA,MAAMC,YAAY,GAAE;AAChBC,EAAAA,YAAY,EAAE,CACV;AACIC,IAAAA,EAAE,EAAEP,IAAI,EADZ;AAEIQ,IAAAA,KAAK,EAAE,aAFX;AAGIC,IAAAA,MAAM,EAAE,CAAC,KAHb;AAIIC,IAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL;AAJV,GADU,EAOV;AACIL,IAAAA,EAAE,EAAEP,IAAI,EADZ;AAEIQ,IAAAA,KAAK,EAAE,QAFX;AAGIC,IAAAA,MAAM,EAAE,CAAC,KAHb;AAIIC,IAAAA,IAAI,EAACC,IAAI,CAACC,GAAL;AAJT,GAPU,EAaV;AACIL,IAAAA,EAAE,EAAEP,IAAI,EADZ;AAEIQ,IAAAA,KAAK,EAAE,iBAFX;AAGIC,IAAAA,MAAM,EAAE,CAAC,IAHb;AAIIC,IAAAA,IAAI,EAACC,IAAI,CAACC,GAAL;AAJT,GAbU,EAmBV;AACIL,IAAAA,EAAE,EAAEP,IAAI,EADZ;AAEIQ,IAAAA,KAAK,EAAE,SAFX;AAGIC,IAAAA,MAAM,EAAE,OAHZ;AAIIC,IAAAA,IAAI,EAACC,IAAI,CAACC,GAAL;AAJT,GAnBU,CADE;AA2BhBC,EAAAA,KAAK,EAAC,CA3BU;AA4BhBC,EAAAA,SAAS,EAAE;AA5BK,CAApB;AA+BA,eAAe,UAASC,KAAK,GAACV,YAAf,EAA6BW,MAA7B,EAAoC;AAC/C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKhB,gBAAL;AACI,aAAM,EACF,GAAGc;AADD,OAAN;;AAGJ,SAAKZ,kBAAL;AACI,aAAM,EACF,GAAGY,KADD;AAEFT,QAAAA,YAAY,EAAES,KAAK,CAACT,YAAN,CAAmBY,MAAnB,CAA0BC,WAAW,IAAIA,WAAW,CAACZ,EAAZ,KAAmBS,MAAM,CAACI,OAAnE;AAFZ,OAAN;;AAIJ,SAAKlB,eAAL;AACI,aAAM,EACF,GAAGa,KADD;AAEFT,QAAAA,YAAY,EAAE,CAACU,MAAM,CAACI,OAAR,EAAiB,GAAGL,KAAK,CAACT,YAA1B;AAFZ,OAAN;;AAIJ,SAAKF,SAAL;AACI,UAAIiB,UAAU,GAAC,CAAf;AACAN,MAAAA,KAAK,CAACT,YAAN,CAAmBgB,GAAnB,CAAuB,CAAC;AAACb,QAAAA;AAAD,OAAD,KAAc;AACjCY,QAAAA,UAAU,IAAEE,UAAU,CAACd,MAAD,CAAtB;AACH,OAFD;AAGAY,MAAAA,UAAU,GAACA,UAAU,CAACG,OAAX,CAAmB,CAAnB,CAAX;AACAT,MAAAA,KAAK,CAACD,SAAN,GAAgBO,UAAhB;AAEA,UAAII,UAAU,GAAC,CAAf;AACAV,MAAAA,KAAK,CAACT,YAAN,CAAmBgB,GAAnB,CAAuB,CAAC;AAACb,QAAAA;AAAD,OAAD,KAAc;AACjC,YAAIA,MAAM,GAAG,CAAb,EAAgB;AACZgB,UAAAA,UAAU,IAAEF,UAAU,CAACd,MAAD,CAAtB;AACH;AACJ,OAJD;AAKAgB,MAAAA,UAAU,GAAEA,UAAU,CAACD,OAAX,CAAmB,CAAnB,CAAZ;AACAT,MAAAA,KAAK,CAACF,KAAN,GAAYY,UAAZ;;AAGJ;AACI,aAAOV,KAAP;AAlCR;AAoCH","sourcesContent":["import uuid from 'uuid/v1'\nimport { GET_TRANSACTIONS, ADD_TRANSACTION, DELETE_TRANSACTION, GET_STATS} from \"../actions/types\"\n\nconst initialState ={\n    transactions: [\n        {\n            id: uuid(),\n            title: \"Sainsbury's\",\n            amount: -33.75,\n            date: Date.now()\n        },\n        {\n            id: uuid(),\n            title: \"Greggs\",\n            amount: -15.25,\n            date:Date.now()\n        },\n        {\n            id: uuid(),\n            title: \"Mission Burrito\",\n            amount: -7.23,\n            date:Date.now()\n        },\n        {\n            id: uuid(),\n            title: \"Fishies\",\n            amount: 1000.50,\n            date:Date.now()\n        },\n    ],\n    debit:0,\n    remainder: 0\n}\n\nexport default function(state=initialState, action){\n    switch(action.type){\n        case GET_TRANSACTIONS:\n            return{\n                ...state\n            }\n        case DELETE_TRANSACTION:\n            return{\n                ...state,\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\n            }\n        case ADD_TRANSACTION:\n            return{\n                ...state,\n                transactions: [action.payload, ...state.transactions]\n            }\n        case GET_STATS:\n            let totalDebit=0;\n            state.transactions.map(({amount}) => {\n                totalDebit+=parseFloat(amount)\n            });\n            totalDebit=totalDebit.toFixed(2);\n            state.remainder=totalDebit;\n\n            let moneySpent=0;\n            state.transactions.map(({amount}) => {\n                if (amount < 0 ){\n                    moneySpent+=parseFloat(amount)\n                }\n            });\n            moneySpent= moneySpent.toFixed(2)\n            state.debit=moneySpent\n            \n            \n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}