{"ast":null,"code":"var _jsxFileName = \"/Users/kavin11/mern-money/client/src/components/ChartData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTransactions } from \"../actions/transactionActions\";\nimport { Container } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport { Pie } from \"react-chartjs-2\";\n\nclass ChartData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.data = {\n      labels: [],\n      datasets: [{\n        label: '# of Votes',\n        data: [],\n        backgroundColor: ['rgba(86, 0, 145, 0.7)', 'rgba(86, 197, 145, 0.7)', 'rgba(86, 108, 255, 0.7)', 'rgba(242, 108, 255, 0.7)'],\n        borderColor: ['rgba(86, 0, 145, 0.7)', 'rgba(54, 162, 235, 1)', 'rgba(86, 108, 255, 0.7)'],\n        borderWidth: 1\n      }]\n    };\n\n    this.setChartData = canvas => {\n      this.data.datasets.foreach((set, i) => {\n        set.backgroundColor = this.setGradientColor(canvas, colors[i]);\n      });\n    };\n  }\n\n  render() {\n    const {\n      transactions\n    } = this.props.transaction;\n    const chartLabels = [];\n    transactions.map(({\n      title,\n      amount\n    }) => {\n      if (amount < 0) {\n        chartLabels.push(title);\n      }\n    });\n    const chartData = [];\n    transactions.map(({\n      amount\n    }) => {\n      if (amount < 0) {\n        chartData.push(amount);\n      }\n    });\n    this.data.datasets[0].data = chartData;\n    this.data.labels = chartLabels;\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Pie, {\n      data: this.setChartData,\n      responsive: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nChartData.propTypes = {\n  getTransactions: PropTypes.func.isRequired,\n  transaction: PropTypes.object.isRequired,\n  getStats: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  transaction: state.transaction\n});\n\nexport default connect(mapStateToProps, {\n  getTransactions\n})(ChartData);","map":{"version":3,"sources":["/Users/kavin11/mern-money/client/src/components/ChartData.js"],"names":["React","Component","connect","getTransactions","Container","PropTypes","Pie","ChartData","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","setChartData","canvas","foreach","set","i","setGradientColor","colors","render","transactions","props","transaction","chartLabels","map","title","amount","push","chartData","propTypes","func","isRequired","object","getStats","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAAQC,SAAR,QAAwB,YAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAEA,MAAMC,SAAN,SAAwBN,SAAxB,CAAiC;AAAA;AAAA;AAAA,SAE7BO,IAF6B,GAEvB;AACFC,MAAAA,MAAM,EAAE,EADN;AAEFC,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,KAAK,EAAE,YADA;AAEPH,QAAAA,IAAI,EAAE,EAFC;AAGPI,QAAAA,eAAe,EAAE,CACb,uBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,0BAJa,CAHV;AASPC,QAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,EAGT,yBAHS,CATN;AAcPC,QAAAA,WAAW,EAAE;AAdN,OAAD;AAFR,KAFuB;;AAAA,SAsB7BC,YAtB6B,GAsBdC,MAAM,IAAI;AAGrB,WAAKR,IAAL,CAAUE,QAAV,CAAmBO,OAAnB,CAA2B,CAACC,GAAD,EAAMC,CAAN,KAAY;AACnCD,QAAAA,GAAG,CAACN,eAAJ,GAAsB,KAAKQ,gBAAL,CAAsBJ,MAAtB,EAA8BK,MAAM,CAACF,CAAD,CAApC,CAAtB;AACH,OAFD;AAGH,KA5B4B;AAAA;;AA8B7BG,EAAAA,MAAM,GAAE;AACJ,UAAM;AAAEC,MAAAA;AAAF,QAAmB,KAAKC,KAAL,CAAWC,WAApC;AACA,UAAMC,WAAW,GAAC,EAAlB;AACAH,IAAAA,YAAY,CAACI,GAAb,CAAiB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAD,KAAmB;AAChC,UAAIA,MAAM,GAAC,CAAX,EAAa;AACTH,QAAAA,WAAW,CAACI,IAAZ,CAAiBF,KAAjB;AACH;AAEJ,KALD;AAQA,UAAMG,SAAS,GAAC,EAAhB;AACAR,IAAAA,YAAY,CAACI,GAAb,CAAiB,CAAC;AAACE,MAAAA;AAAD,KAAD,KAAY;AACzB,UAAIA,MAAM,GAAE,CAAZ,EAAc;AACVE,QAAAA,SAAS,CAACD,IAAV,CAAeD,MAAf;AACH;AACJ,KAJD;AAMA,SAAKrB,IAAL,CAAUE,QAAV,CAAmB,CAAnB,EAAsBF,IAAtB,GAA2BuB,SAA3B;AACA,SAAKvB,IAAL,CAAUC,MAAV,GAAiBiB,WAAjB;AAGA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,KAAKX,YAAhB;AAA8B,MAAA,UAAU,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAKH;;AAzD4B;;AA4DjCR,SAAS,CAACyB,SAAV,GAAsB;AAClB7B,EAAAA,eAAe,EAAEE,SAAS,CAAC4B,IAAV,CAAeC,UADd;AAElBT,EAAAA,WAAW,EAAEpB,SAAS,CAAC8B,MAAV,CAAiBD,UAFZ;AAGlBE,EAAAA,QAAQ,EAAE/B,SAAS,CAAC4B,IAAV,CAAeC;AAHP,CAAtB;;AAMA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAC9Bb,EAAAA,WAAW,EAAEa,KAAK,CAACb;AADW,CAAL,CAA7B;;AAKA,eAAevB,OAAO,CAACmC,eAAD,EAAkB;AAAElC,EAAAA;AAAF,CAAlB,CAAP,CAA8CI,SAA9C,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTransactions } from \"../actions/transactionActions\";\nimport {Container} from \"reactstrap\"\nimport PropTypes from \"prop-types\";\nimport { Pie } from \"react-chartjs-2\";\n\nclass ChartData extends Component{\n    \n    data ={\n        labels: [],\n        datasets: [{\n            label: '# of Votes',\n            data: [],\n            backgroundColor: [\n                'rgba(86, 0, 145, 0.7)',\n                'rgba(86, 197, 145, 0.7)',\n                'rgba(86, 108, 255, 0.7)',\n                'rgba(242, 108, 255, 0.7)'\n            ],\n            borderColor: [\n                'rgba(86, 0, 145, 0.7)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(86, 108, 255, 0.7)'\n            ],\n            borderWidth: 1\n        }]\n    }\n\n    setChartData = canvas => {\n            \n            \n        this.data.datasets.foreach((set, i) => {\n            set.backgroundColor = this.setGradientColor(canvas, colors[i]);\n        })\n    }\n\n    render(){\n        const { transactions } = this.props.transaction\n        const chartLabels=[];\n        transactions.map(({title, amount})=>{\n            if (amount<0){\n                chartLabels.push(title)\n            }\n            \n        });\n        \n\n        const chartData=[];\n        transactions.map(({amount})=>{\n            if (amount <0){\n                chartData.push(amount)\n            }\n        });\n        \n        this.data.datasets[0].data=chartData\n        this.data.labels=chartLabels\n        \n        \n        return(\n            <Container>\n                <Pie data={this.setChartData} responsive=\"true\" />\n            </Container>\n        )\n    }\n}\n\nChartData.propTypes = {\n    getTransactions: PropTypes.func.isRequired,\n    transaction: PropTypes.object.isRequired,\n    getStats: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    transaction: state.transaction\n\n})\n\nexport default connect(mapStateToProps, { getTransactions })(ChartData)"]},"metadata":{},"sourceType":"module"}