{"ast":null,"code":"var _jsxFileName = \"/Users/kavin11/mern-money/client/src/components/ChartData.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTransactions } from \"../actions/transactionActions\";\nimport { Container } from \"reactstrap\";\nimport PropTypes from \"prop-types\";\nimport { Pie } from \"react-chartjs-2\";\nimport randomColor from \"randomcolor\";\n\nclass ChartData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.data = {\n      labels: [],\n      datasets: [{\n        label: '# of Votes',\n        data: [],\n        backgroundColor: [],\n        borderColor: ['white'],\n        borderWidth: 2\n      }]\n    };\n  }\n\n  render() {\n    const {\n      transactions\n    } = this.props.transaction;\n    const chartLabels = [];\n    transactions.map(({\n      title,\n      amount\n    }) => {\n      if (amount < 0) {\n        chartLabels.push(title);\n      }\n    });\n    const chartData = [];\n    transactions.map(({\n      title,\n      amount\n    }) => {\n      if (amount < 0) {\n        chartData.push(amount);\n      }\n    });\n    this.data.datasets[0].data = chartData;\n    this.data.labels = chartLabels;\n    const bgcolor = randomColor({\n      luminosity: 'dark',\n      format: 'rgba'\n    });\n    this.data.datasets[0].backgroundColor.push(bgcolor);\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pieChartTrans\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Pie, {\n      data: this.data,\n      responsive: \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nChartData.propTypes = {\n  transaction: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  transaction: state.transaction\n});\n\nexport default connect(mapStateToProps)(ChartData);","map":{"version":3,"sources":["/Users/kavin11/mern-money/client/src/components/ChartData.js"],"names":["React","Component","connect","getTransactions","Container","PropTypes","Pie","randomColor","ChartData","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","render","transactions","props","transaction","chartLabels","map","title","amount","push","chartData","bgcolor","luminosity","format","propTypes","object","isRequired","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,SAAQC,SAAR,QAAwB,YAAxB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,iBAApB;AACA,OAAOC,WAAP,MAAwB,aAAxB;;AAEA,MAAMC,SAAN,SAAwBP,SAAxB,CAAiC;AAAA;AAAA;AAAA,SAE7BQ,IAF6B,GAEvB;AACFC,MAAAA,MAAM,EAAE,EADN;AAEFC,MAAAA,QAAQ,EAAE,CAAC;AACPC,QAAAA,KAAK,EAAE,YADA;AAEPH,QAAAA,IAAI,EAAE,EAFC;AAGPI,QAAAA,eAAe,EAAE,EAHV;AAIPC,QAAAA,WAAW,EAAE,CACT,OADS,CAJN;AAOPC,QAAAA,WAAW,EAAE;AAPN,OAAD;AAFR,KAFuB;AAAA;;AAmB7BC,EAAAA,MAAM,GAAE;AACJ,UAAM;AAAEC,MAAAA;AAAF,QAAmB,KAAKC,KAAL,CAAWC,WAApC;AACA,UAAMC,WAAW,GAAC,EAAlB;AACAH,IAAAA,YAAY,CAACI,GAAb,CAAiB,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAD,KAAmB;AAChC,UAAIA,MAAM,GAAC,CAAX,EAAa;AACTH,QAAAA,WAAW,CAACI,IAAZ,CAAiBF,KAAjB;AACH;AAEJ,KALD;AASA,UAAMG,SAAS,GAAC,EAAhB;AACAR,IAAAA,YAAY,CAACI,GAAb,CAAiB,CAAC;AAACC,MAAAA,KAAD;AAAOC,MAAAA;AAAP,KAAD,KAAkB;AAC/B,UAAIA,MAAM,GAAE,CAAZ,EAAc;AAEVE,QAAAA,SAAS,CAACD,IAAV,CAAeD,MAAf;AACH;AACJ,KALD;AASA,SAAKd,IAAL,CAAUE,QAAV,CAAmB,CAAnB,EAAsBF,IAAtB,GAA2BgB,SAA3B;AACA,SAAKhB,IAAL,CAAUC,MAAV,GAAiBU,WAAjB;AAEA,UAAMM,OAAO,GAACnB,WAAW,CAAC;AACvBoB,MAAAA,UAAU,EAAC,MADY;AAEvBC,MAAAA,MAAM,EAAE;AAFe,KAAD,CAAzB;AAKA,SAAKnB,IAAL,CAAUE,QAAV,CAAmB,CAAnB,EAAsBE,eAAtB,CAAsCW,IAAtC,CAA2CE,OAA3C;AAIA,wBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,IAAI,EAAE,KAAKjB,IAAhB;AAAsB,MAAA,UAAU,EAAC,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ,CADJ;AAOH;;AA5D4B;;AA+DjCD,SAAS,CAACqB,SAAV,GAAsB;AAElBV,EAAAA,WAAW,EAAEd,SAAS,CAACyB,MAAV,CAAiBC;AAFZ,CAAtB;;AAKA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAC9Bd,EAAAA,WAAW,EAAEc,KAAK,CAACd;AADW,CAAL,CAA7B;;AAKA,eAAejB,OAAO,CAAC8B,eAAD,CAAP,CAAyBxB,SAAzB,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTransactions } from \"../actions/transactionActions\";\nimport {Container} from \"reactstrap\"\nimport PropTypes from \"prop-types\";\nimport { Pie } from \"react-chartjs-2\";\nimport randomColor from \"randomcolor\";\n\nclass ChartData extends Component{\n    \n    data ={\n        labels: [],\n        datasets: [{\n            label: '# of Votes',\n            data: [],\n            backgroundColor: [],\n            borderColor: [\n                'white'\n            ],\n            borderWidth: 2\n        }]\n    }\n\n    \n\n\n\n    render(){\n        const { transactions } = this.props.transaction\n        const chartLabels=[];\n        transactions.map(({title, amount})=>{\n            if (amount<0){\n                chartLabels.push(title)\n            }\n           \n        });\n        \n        \n\n        const chartData=[];\n        transactions.map(({title,amount})=>{\n            if (amount <0){\n\n                chartData.push(amount)\n            }\n        });\n\n        \n        \n        this.data.datasets[0].data=chartData\n        this.data.labels=chartLabels\n\n        const bgcolor=randomColor({\n           luminosity:'dark',\n           format: 'rgba' \n        });\n        \n        this.data.datasets[0].backgroundColor.push(bgcolor)\n        \n\n        \n        return(\n            <Container>\n                <div className=\"pieChartTrans\">\n                    <Pie data={this.data} responsive=\"true\" />\n                </div>\n            </Container>\n        )\n    }\n}\n\nChartData.propTypes = {\n\n    transaction: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    transaction: state.transaction\n\n})\n\nexport default connect(mapStateToProps)(ChartData)"]},"metadata":{},"sourceType":"module"}