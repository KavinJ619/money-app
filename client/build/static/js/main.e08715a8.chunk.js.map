{"version":3,"sources":["components/NavBar.js","actions/transactionActions.js","actions/types.js","components/TransactionList.js","components/TransactionStats.js","reducers/transactionReducer.js","reducers/index.js","store.js","components/TransactionModal.js","components/ChartData.js","components/RandomComp.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","isOpen","toggle","setState","Navbar","dark","expand","color","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","getTransactions","dispatch","setTransLoading","axios","get","then","res","type","payload","data","getStats","TransactionList","onDeleteClick","id","props","deleteTransaction","transactions","transaction","undefined","TransitionGroup","map","_id","title","amount","date","CSSTransition","key","timeout","classNames","Button","size","bind","connect","delete","TransactionStats","totalDebit","parseFloat","toFixed","moneySpent","totalIncome","income","remainder","initialState","loading","combineReducers","action","filter","debit","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","TransactionModal","modal","onChangeTitle","e","target","value","onChangeAmount","onSubmitAdd","preventDefault","newTransaction","addTransaction","Modal","ModalHeader","ModalBody","Form","onSubmit","FormGroup","Input","name","placeholder","onChange","post","ChartData","labels","datasets","label","backgroundColor","borderColor","borderWidth","chartLabels","push","chartData","bgcolor","randomColor","luminosity","format","responsive","RandomComp","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e08715a8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    Container\n} from \"reactstrap\";\n\nclass NavBar extends Component {\n    state={\n        isOpen:false\n    }\n\n    toggle = () => {\n        this.setState({\n            isOpen: !this.state.isOpen\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <Navbar dark expand=\"lg\" color=\"dark\" className=\"mb-5 navigationBar\">\n                        <Container>\n                        <NavbarBrand href=\"/\">\n                            <h3 className=\"BrandNav\">\n                                Money Manager\n                            </h3>\n                        </NavbarBrand>\n                        <NavbarToggler onClick={this.toggle} />\n                        <Collapse isOpen={this.state.isOpen} navbar>\n                            <Nav className=\"ml-auto\" navbar>\n                                <NavItem>\n                                    <NavLink href=\"http://github.com/KavinJ619\">\n                                        GitHub\n                                    </NavLink>\n                                </NavItem>\n                            </Nav>\n                        </Collapse>\n                    </Container>\n                </Navbar>\n            </div>\n        )\n    }\n}\n\nexport default NavBar;","import axios from \"axios\";\nimport { GET_TRANSACTIONS, ADD_TRANSACTION, DELETE_TRANSACTION , GET_STATS, TRANSACTIONS_LOADING} from \"./types\"\n\nexport const getTransactions = () => dispatch => {\n    dispatch(setTransLoading());\n    axios   \n    .get('/api/transactions')\n    .then(res => \n        dispatch({\n            type:GET_TRANSACTIONS,\n            payload: res.data\n        }))\n}\n\nexport const deleteTransaction = (id) => dispatch =>{\n    axios\n        .delete(`/api/transactions/${id}`)\n        .then(res => {\n            dispatch({\n                type:DELETE_TRANSACTION,\n                payload:id\n            })\n        })\n}\n\nexport const addTransaction = (transaction) => dispatch => {\n    axios\n        .post(\"/api/transactions\", transaction)\n        .then(res => \n            dispatch({\n                type:ADD_TRANSACTION,\n                payload: res.data\n            }))\n}\n\nexport const getStats = () => {\n    return{\n        type:GET_STATS\n    }\n}\n\nexport const setTransLoading = () => {\n    return {\n        type: TRANSACTIONS_LOADING\n    }\n}","export const GET_TRANSACTIONS = \"GET_TRANSACTIONS\"\nexport const ADD_TRANSACTION = \"ADD_TRANSACTION\"\nexport const DELETE_TRANSACTION = \"DELETE_TRANSACTION\"\nexport const GET_STATS=\"GET_STATS\"\nexport const TRANSACTIONS_LOADING=\"TRANSACTIONS_LOADING\"","import React, { Component } from \"react\";\nimport { Container, ListGroup, ListGroupItem, Button } from \"reactstrap\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\"\nimport uuid from 'uuid/v1'\nimport { FaMinus, FaThumbsDown } from 'react-icons/fa';\nimport { connect } from \"react-redux\"\nimport { getTransactions, deleteTransaction, getStats } from \"../actions/transactionActions\"\nimport PropTypes from \"prop-types\"\n\nclass TransactionList extends Component{\n\n    componentDidMount(){\n        this.props.getTransactions();\n    }\n    \n    onDeleteClick = (id) =>{\n        this.props.deleteTransaction(id);\n        this.props.getStats()\n        \n    }\n\n\n\n    render() {\n        const { transactions } = this.props.transaction\n        if (transactions===undefined){\n            return(\n                <div>Loading....</div>\n            )\n        }\n        else{\n            return(\n            \n                <Container>\n                    <TransitionGroup>\n                        {transactions.map(( {_id,title,amount,date}) => (\n                            <CSSTransition key={_id} timeout={500} classNames=\"fade\">\n                                <div className=\"transaction-item\">\n                                    <Button \n                                        className=\"remove-button\"\n                                        color=\"danger\" \n                                        size=\"sm\"\n                                        onClick={this.onDeleteClick.bind(this, _id)}>\n                                        &times;\n                                    </Button>\n                                    <div className=\"transaction-list-title\">\n                                        Title: {title}\n                                    </div>\n                                    <div className=\"transaction-list-amount\">\n                                        Amount: ${amount}\n                                    </div>\n                                    <div className=\"transaction-list-date\">\n                                        Date: <b>{date}</b>\n                                    </div>\n                                    \n                                    <div className={ amount>0 ? \"pos\" : \"neg\"} />\n                                    \n                                </div>\n                        \n                            </CSSTransition>\n                            \n                        ))}\n                    </TransitionGroup>\n                    \n                    \n                </Container>\n            )\n        }\n        \n    }\n\n}\n\nTransactionList.propTypes = {\n    getTransactions: PropTypes.func.isRequired,\n    transaction: PropTypes.object.isRequired,\n    \n}\n\nconst mapStateToProps = (state) => ({\n    transaction: state.transaction\n})\n\n\nexport default connect(mapStateToProps, {getTransactions, deleteTransaction, getStats})(TransactionList);","import React, { Component } from \"react\";\nimport { Container } from \"reactstrap\"\nimport { connect } from \"react-redux\";\nimport { getStats } from \"../actions/transactionActions\"\nimport PropTypes from \"prop-types\"\n\nclass TransactionStats extends Component {\n    render(){\n\n        const { transactions } = this.props.transaction\n        let totalDebit=0;\n\n        transactions.map(({amount})=>{\n            totalDebit+=parseFloat(amount);\n        });\n        totalDebit=totalDebit.toFixed(2);\n\n        let moneySpent=0;\n        transactions.map(({amount})=>{\n            if (amount <0){\n                moneySpent+=parseFloat(amount)\n            }\n        })\n        moneySpent= moneySpent.toFixed(2)\n\n        let totalIncome=0\n        transactions.map(({amount})=>{\n            if (amount>0){\n                totalIncome+=parseFloat(amount)\n            }\n        })\n        totalIncome=totalIncome.toFixed(2)\n\n        return(\n            <Container>\n                <div className=\"income-stats\">\n                    <div className=\"income-header\">\n                        <h3>Income</h3>\n                    </div>\n                    <div className=\"income-income\">\n                        ${totalIncome}\n                    </div>\n                </div>\n                <div className=\"stats-wrapper\">\n                    <div className=\"stats-income\">\n                        <h3>Balance</h3>\n                        ${totalDebit}\n                    </div>\n                    <div className=\"stats-remainder\">\n                        <h3>Expenditure</h3>\n                        ${moneySpent}\n                    </div>\n                </div>\n            </Container>\n        )\n    }\n}\n\n\n\nTransactionStats.propTypes = {\n    transaction: PropTypes.object.isRequired,\n    income: PropTypes.number,\n    remainder: PropTypes.number\n    \n}\n\nconst mapStateToProps = state => ({\n    transaction: state.transaction,\n    income: state.income,\n    remainder: state.remainder\n})\n\nexport default connect(mapStateToProps, { getStats })(TransactionStats)","import uuid from 'uuid/v1'\nimport { GET_TRANSACTIONS, ADD_TRANSACTION, DELETE_TRANSACTION, GET_STATS, TRANSACTIONS_LOADING} from \"../actions/types\"\n\nconst initialState ={\n    transactions: [],\n    loading:false\n}\n\nexport default function(state=initialState, action){\n    switch(action.type){\n        case GET_TRANSACTIONS:\n            return{\n                ...state,\n                transactions: action.payload,\n                loading:false\n            }\n        case DELETE_TRANSACTION:\n            return{\n                ...state,\n                transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\n            }\n        case ADD_TRANSACTION:\n            return{\n                ...state,\n                transactions: [action.payload, ...state.transactions]\n            }\n        case GET_STATS:\n            let totalDebit=0;\n            state.transactions.map(({amount}) => {\n                totalDebit+=parseFloat(amount)\n            });\n            totalDebit=totalDebit.toFixed(2);\n            state.remainder=totalDebit;\n\n            let moneySpent=0;\n            state.transactions.map(({amount}) => {\n                if (amount < 0 ){\n                    moneySpent+=parseFloat(amount)\n                }\n            });\n            moneySpent= moneySpent.toFixed(2)\n            state.debit=moneySpent\n            \n        case TRANSACTIONS_LOADING:\n            return{\n                ...state,\n                loading:true\n            }\n            \n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport transactionReducer from \"./transactionReducer\"\n\nexport default combineReducers({\n    transaction: transactionReducer\n})","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\"\n\nconst initialState={};\n\nconst middleware= [thunk];\n\nconst store = createStore(rootReducer, initialState, compose(\n    applyMiddleware(...middleware)\n));\n\nexport default store;","import React, { Component } from \"react\";\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup,\n    Label,\n    Input\n} from \"reactstrap\";\nimport { connect } from \"react-redux\";\nimport { addTransaction, getStats, getTransactions } from \"../actions/transactionActions\"\nimport PropTypes from \"prop-types\"\n\nclass TransactionModal extends Component{\n    state ={\n        modal:false,\n        title: '',\n        amount:0\n    }\n\n    componentDidMount(){\n        this.props.getTransactions();\n    }\n\n    toggle = () => {\n        this.setState({\n            modal: !this.state.modal\n        })\n    }\n\n    onChangeTitle = (e) =>{\n        this.setState({\n            title: e.target.value\n        })\n    }\n\n    onChangeAmount = (e) =>{\n        this.setState({\n            amount: e.target.value\n        })\n    }\n\n    \n\n\n    onSubmitAdd = e => {\n        e.preventDefault();\n\n        const newTransaction = {\n            title: this.state.title,\n            amount: this.state.amount,\n        }\n        \n        this.props.addTransaction(newTransaction);\n        this.props.getStats();\n        this.toggle();\n    }\n\n\n    render(){\n        return(\n            <div>\n                <Button className=\"addtransButton\" onClick={this.toggle}>\n                    Add Transaction\n                </Button>\n                <Modal\n                isOpen={this.state.modal}\n                toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>\n                        Add a Transaction!\n                    </ModalHeader>\n                    <ModalBody>\n                        <Form onSubmit={this.onSubmitAdd}>\n                            <FormGroup>\n                                <Input \n                                type=\"text\"\n                                name=\"title\"\n                                id=\"transaction\"\n                                placeholder=\"Enter Transaction Title\"\n                                onChange={this.onChangeTitle}\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Input \n                                type=\"text\"\n                                name=\"title\"\n                                id=\"transaction\"\n                                placeholder=\"Enter Transaction Amount (Start with - If Negative)\"\n                                onChange={this.onChangeAmount}\n                                />\n                            </FormGroup>\n                            <Button className=\"addTransButtonModal\">\n                                Add Transaction\n                            </Button>\n                        </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        )\n    }\n}\n\nTransactionModal.propTypes = {\n    getTransactions: PropTypes.func.isRequired,\n    transaction: PropTypes.object.isRequired,\n    getStats: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = state => ({\n    transaction: state.transaction\n\n})\n\nexport default connect(mapStateToProps, { addTransaction, getStats, getTransactions })(TransactionModal)","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getTransactions } from \"../actions/transactionActions\";\nimport {Container} from \"reactstrap\"\nimport PropTypes from \"prop-types\";\nimport { Pie } from \"react-chartjs-2\";\nimport randomColor from \"randomcolor\";\n\nclass ChartData extends Component{\n    \n    data ={\n        labels: [],\n        datasets: [{\n            label: '# of Votes',\n            data: [],\n            backgroundColor: [],\n            borderColor: [\n                'white'\n            ],\n            borderWidth: 2\n        }]\n    }\n\n    \n\n\n\n    render(){\n        const { transactions } = this.props.transaction\n        const chartLabels=[];\n        transactions.map(({title, amount})=>{\n            if (amount<0){\n                chartLabels.push(title)\n            }\n           \n        });\n        \n        \n\n        const chartData=[];\n        transactions.map(({title,amount})=>{\n            if (amount <0){\n\n                chartData.push(amount)\n            }\n        });\n\n        \n        \n        this.data.datasets[0].data=chartData\n        this.data.labels=chartLabels\n\n        const bgcolor=randomColor({\n           luminosity:'dark',\n           format: 'rgba' \n        });\n        \n        this.data.datasets[0].backgroundColor.push(bgcolor)\n        \n\n        \n        return(\n            <Container>\n                <div className=\"pieChartTrans\">\n                    <Pie data={this.data} responsive=\"true\" />\n                </div>\n            </Container>\n        )\n    }\n}\n\nChartData.propTypes = {\n\n    transaction: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    transaction: state.transaction\n\n})\n\nexport default connect(mapStateToProps)(ChartData)","import React, { Component } from \"react\";\n\nclass RandomComp extends Component{\n    render(){\n        return(\n            <h1>Randopm</h1>\n        )\n    }\n}\n\nexport default RandomComp;\n\n","import React from 'react';\n\nimport NavBar from \"./components/NavBar\"\nimport TransactionList from \"./components/TransactionList\"\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport './App.css';\nimport { Container } from \"reactstrap\"\nimport TransactionStats from './components/TransactionStats';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\"\nimport TransactionModal from './components/TransactionModal';\nimport ChartData from \"./components/ChartData\"\nimport RandomComp from\"./components/RandomComp\";\n\nfunction App() {\n  return (\n    <Provider store={store} value={store}>\n      <div className=\"App\">\n      \n        <NavBar />\n        <Container>\n          <TransactionStats />\n          <ChartData />\n          <TransactionModal />\n          <TransactionList />\n          <RandomComp />\n        </Container>\n      \n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}